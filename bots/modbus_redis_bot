#!/usr/bin/env python3

import os
import configparser as _cp, time
import xml.etree.ElementTree as _et
# -- core --
from core.debug import debug
from core.utils import sysUtils as utils
from core.redisOps import redisOps
from core.logutils import logUtils
from modbus.modbusRedisRelay import modbusRedisRelay
from modbus.ttydevMeters import ttydevMeters
from system.bot import bot


"""
   bot steps:
      1. load ini file
      2. create redis ops object
      3. load register stream xml file: register_streams.xml  
      4. load data strucs for them
      5. create steam run-table
      6. main loop to check if it is time to run that stream
      7. if time is up ... run thread per stream
"""

# -- -- -- -- --
SYS_INI: _cp = _cp.ConfigParser()
loaded: [] = SYS_INI.read("conf/system.ini")
if len(loaded) == 0:
   print("no ini files loaded")
   exit(1)
# -- -- -- -- --
SEC_INI = SYS_INI["MODBUS"]


# -- -- -- -- load redis object  -- -- -- --
if debug.is_dev_box():
   redops = redisOps(SYS_INI, CONN_SEC="REDIS_DEV")
else:
   redops: redisOps = redisOps(SYS_INI)
# -- ping server --
if not redops.red.ping():
   print("UnableToPingRedisServer")
   exit(1)
#  -- -- -- -- -- -- -- -- -- -- -- -- -- --

"""
   reg_streams have timing attached to them
   register_streams.xml
"""
RS_XML_PATH: str = SEC_INI["REG_STREAMS_XML"]
if not os.path.exists(RS_XML_PATH):
   print(f"FileNotFound: {RS_XML_PATH}")
   exit(1)
RS_XML = _et.parse(RS_XML_PATH)

"""
   these are edge modbus based meters that can be grouped to multiple
   /dev/ttyUSBx devices under linux
   MM_XML_PATH is file with ALL modbus meters in the building grouped by 
   EDGE (HOST) -> ttyUSBx device 
"""
MM_XML_PATH: str = SEC_INI["METER_XML"]
if not os.path.exists(MM_XML_PATH):
   print(f"FileNotFound: {MM_XML_PATH}")
   exit(1)
MM_XML = _et.parse(MM_XML_PATH).getroot()
# -- -- -- -- -- --
xpath: str = f"edges/edge[@hostname='{utils.HOST}']/ttydev"
ttydev_meters_arr: [ttydevMeters] = [ttydevMeters(n) for n in MM_XML.findall(xpath)]
for item in ttydev_meters_arr:
   item.init()
# -- -- -- -- -- --


"""
   -- -- -- -- run relay thread -- -- -- --
"""
modbusRedisRelayTh: modbusRedisRelay = \
   modbusRedisRelay(SYS_INI, redops, ttydev_meters_arr, RS_XML)
# -- -- -- -- -- --
modbusRedisRelayTh.init()
modbusRedisRelayTh.start()


# -- main loop --
MAIN_LOOP_SECS: float = float(SEC_INI["MAIN_LOOP_SECS"])


def main():
   # -- -- --
   _bot: bot = bot(sec=SEC_INI)
   _bot.clear_previous_prox()
   _bot.set_process_name()
   # -- -- --
   diag_tag: str = SEC_INI["DIAG_TAG"]
   diag_tag = utils.set_systag(diag_tag)
   # -- -- --
   while True:
      try:
         print("[ modbus_redis_bot: main ]")
         if True:
            msg = "modbusRedisRelay TRUE"
            dct: {} = {"bot_dts_utc": utils.dts_utc(), "msg": msg}
            modbusRedisRelayTh.redops.update_edge_diag(diag_tag=diag_tag, mapdct=dct, restart=False)
         # -- -- -- --
         time.sleep(MAIN_LOOP_SECS)
      except Exception as e:
         logUtils.log_exp(e)


# -- -- -- ep -- -- --
if __name__ == "__main__":
   main()
