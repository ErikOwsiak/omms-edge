#!/usr/bin/env python3

import os
import configparser as _cp, time
import xml.etree.ElementTree as _et
# -- core --
from core.debug import debug
from core.utils import sysUtils as utils
from core.redisOps import redisOps
from modbus.ttydevMeters import ttydevMeters
from core.ttydevDiscovery import ttyUSBDeviceScanner
from system.bot import bot


PSEC = "TTYDEV_DISCO"
SYS_INI: _cp.ConfigParser = _cp.ConfigParser()
loaded: [] = SYS_INI.read("conf/system.ini")
if len(loaded) == 0:
   print("no ini files loaded")
   exit(1)
# -- setup sec --
SEC = SYS_INI[PSEC]


# -- -- -- -- load redis object  -- -- -- --
if debug.is_dev_box():
   redops = redisOps(SYS_INI, CONN_SEC="REDIS_DEV")
else:
   redops: redisOps = redisOps(SYS_INI)
# -- ping server --
if not redops.red.ping():
   print("UnableToPingRedisServer")
   exit(1)
#  -- -- -- -- -- -- -- -- -- -- -- -- -- --


"""
   these are edge modbus based meters that can be grouped to multiple
   /dev/ttyUSBx devices under linux
   MM_XML_PATH is file with ALL modbus meters in the building grouped by 
   EDGE (HOST) -> ttyUSBx device 
"""
MM_XML_PATH: str = SEC["MODBUS_METERS_XML"]
if not os.path.exists(MM_XML_PATH):
   print(f"FileNotFound: {MM_XML_PATH}")
   exit(1)
MM_XML = _et.parse(MM_XML_PATH).getroot()
# -- -- -- -- -- --
xpath: str = f"edges/edge[@hostname='{utils.HOST}']/ttydev"
ttydev_meters_arr: [ttydevMeters] = [ttydevMeters(n) for n in MM_XML.findall(xpath)]
for item in ttydev_meters_arr:
   item.init()
# -- -- -- -- -- --
scannerTh: ttyUSBDeviceScanner = ttyUSBDeviceScanner(redops, SYS_INI, ttydev_meters_arr)
scannerTh.init()
scannerTh.start()
# -- -- -- -- -- --


def main():
   # -- -- --
   _bot: bot = bot(sec=SEC)
   _bot.clear_previous_prox()
   _bot.set_process_name()
   # -- -- --
   diag_tag: str = SEC["DIAG_TAG"]
   diag_tag = utils.set_systag(diag_tag)
   # -- -- -- --
   MAIN_LOOP_SECS = int(SYS_INI[PSEC]["MAIN_LOOP_SECS"])
   # -- MAIN LOOP --
   while True:
      # -- -- -- --
      if scannerTh.is_done:
         print("\texit...\n\n")
         exit(0)
      # -- -- -- --
      dct: {} = {"bot_dts_utc": utils.dts_utc()}
      scannerTh.redops.update_edge_diag_tag(diag_tag=diag_tag, mapdct=dct, restart=False)
      time.sleep(MAIN_LOOP_SECS)


# -- start here --
if __name__ == "__main__":
   main()
