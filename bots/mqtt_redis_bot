#!/usr/bin/env python3

import configparser as _cp
import os.path, time, setproctitle
import xml.etree.ElementTree as _et
# -- sys imports --
from core.utils import sysUtils as utils
from mqtt.mqttMeterReaderV1 import mqttMeterReaderV1
from core.redisOps import redisOps
from core.debug import debug
from system.bot import bot


""" ---------------------------------------------------------------------------
   
   README:
      create all global object here and pass them around 
      to diff. subsystems
      
--------------------------------------------------------------------------- """


SYS_INI: _cp.ConfigParser = _cp.ConfigParser()
loaded: [] = SYS_INI.read("conf/system.ini")
if len(loaded) == 0:
   print("NoLoadedConfFiles")
   exit(1)
# -- mqtt section --
MQTT_INI = SYS_INI["MQTT_CORE"]

# -- -- setup globals -- --
PROC_NAME: str = MQTT_INI.get("PROC_NAME", "omms-mqtt-rly")
LOOP_SLEEP_SECS: float = MQTT_INI.getfloat("MAIN_LOOP_SECS")
DIAG_TAG: str = MQTT_INI.get("DIAG_TAG")
DIAG_TAG = utils.set_systag(DIAG_TAG)

# -- -- -- --
if debug.is_dev_box():
   MQTT_INFO_INI = SYS_INI["MQTT_DEV"]
else:
   MQTT_INFO_INI = SYS_INI["MQTT_PROD"]
# -- -- -- --

# -- start redis setup --
if debug.is_dev_box():
   REDOPS: redisOps = redisOps(sys_ini=SYS_INI, CONN_SEC="REDIS_DEV")
else:
   REDOPS: redisOps = redisOps(sys_ini=SYS_INI)
if not REDOPS.red.ping():
   print("RedisServerNoPing")
   exit(1)
# -- end redis setup --

"""
   load mqtt meter_xml_nodes
"""
XML_METER_FILE = MQTT_INI["METER_XML"]
if not os.path.exists(XML_METER_FILE):
   raise FileNotFoundError(XML_METER_FILE)
MET_XML_ROOT = _et.parse(XML_METER_FILE).getroot()
# -- -- -- -- -- -- -- --
mqttReaderV1: mqttMeterReaderV1 = \
   mqttMeterReaderV1(MET_XML_ROOT, SYS_INI, MQTT_INI, MQTT_INFO_INI, REDOPS)
# -- load meter xml data --
if not mqttReaderV1.load_xml_conf():
   exit(2)
# -- -- -- -- -- -- -- --

"""
   init mqtt code
"""
if mqttReaderV1.mqtt_init() != 0:
   exit(3)

"""
   start reader 
"""
if not mqttReaderV1.start():
   exit(4)

# -- main loop --
def main():
   # -- -- --
   _bot: bot = bot(sec=MQTT_INI)
   _bot.clear_previous_prox()
   _bot.set_process_name()
   # -- -- --
   dct: {} = {"init_bot_ping_dts_utc": utils.dts_utc(), "lan_ip":  utils.lan_ip()}
   mqttReaderV1.redops.update_edge_diag(diag_tag=DIAG_TAG, mapdct=dct, restart=True)
   # -- -- main loop -- --
   while True:
      print("[ mqtt_redis_bot: main ]")
      if mqttReaderV1.last_report:
         msg = "mqttReaderV1 TRUE"
         dct: {} = {"bot_ping_dts_utc": utils.dts_utc(), "msg": msg}
         mqttReaderV1.redops.update_edge_diag(diag_tag=DIAG_TAG, mapdct=dct)
      # -- -- -- --
      time.sleep(LOOP_SLEEP_SECS)
   # -- -- -- -- --


# -- start here --
if __name__ == "__main__":
   main()
